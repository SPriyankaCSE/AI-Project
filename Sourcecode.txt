import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.metrics import roc_curve, auc
from sklearn.preprocessing import label_binarize
import warnings
warnings.filterwarnings('ignore')
data = pd.read_csv('road_accident_dataset.csv')
df = data.copy()
df.head(10)
print(‘Information : ‘)
df.info()
df.isnull().sum()
df.describe().T
print("DROPPING NULL VALUES")
print(df.dropna())
plt.figure(figsize=(10, 5))
sns.countplot(x=df['Year'], palette="Set1")
plt.title("Accidents by Year")
plt.xlabel("Year")
plt.ylabel("Count")
plt.xticks(rotation=45)
plt.show()
plt.figure(figsize=(10, 5))
sns.countplot(x=df['Day of Week'], order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], palette="Set2")
plt.title("Accidents by Day of the Week")
plt.xlabel("Day of the Week")
plt.ylabel("Count")
plt.show()
plt.figure(figsize=(8, 8))
df['Weather Conditions'].value_counts().plot.pie(autopct="%1.1f%%", cmap="Spectral", startangle=90, wedgeprops={'edgecolor': 'black'})
plt.title("Accidents by Weather Conditions", fontsize=14, fontweight='bold')
plt.ylabel("")
plt.show()
plt.figure(figsize=(10, 5))
sns.countplot(x=df["Urban/Rural"], palette="Set3")
plt.title("Accidents in Urban vs Rural Areas", fontsize=14, fontweight='bold')
plt.xlabel("Location", fontsize=12)
plt.ylabel("Count", fontsize=12)
plt.show()
plt.figure(figsize=(10, 5))
sns.histplot(df['Speed Limit'], bins=15, kde=True, color="pink")
plt.title("Accidents by Speed Limit")
plt.xlabel("Speed Limit")
plt.ylabel("Count")
plt.show()
plt.figure(figsize=(10, 5))
sns.histplot(df['Number of Vehicles Involved'], bins=10, kde=True, color="green")
plt.title("Number of Vehicles Involved in Accidents", fontsize=14, fontweight='bold')
plt.xlabel("Number of Vehicles", fontsize=12)
plt.ylabel("Count", fontsize=12)
plt.show()
plt.figure(figsize=(10, 6))
sns.countplot(y=df['Region'], order=df['Region'].value_counts().index, palette="magma")
plt.title("Accidents by Region")
plt.xlabel("Count")
plt.ylabel("Region")
plt.show()
plt.figure(figsize=(10, 5))
sns.boxplot(x=df["Visibility Level"], palette="Spectral")
plt.title("Visibility Level Distribution in Accidents", fontsize=14, fontweight='bold')
plt.xlabel("Visibility Level", fontsize=12)
plt.show()
plt.figure(figsize=(10, 5))
sns.violinplot(x=df["Accident Severity"], y=df["Emergency Response Time"], palette="Dark2")
plt.title("Emergency Response Time by Accident Severity", fontsize=14, fontweight='bold')
plt.xlabel("Accident Severity", fontsize=12)
plt.ylabel("Response Time (Minutes)", fontsize=12)
plt.show()
plt.figure(figsize=(10, 5))
sns.scatterplot(x=df["Number of Injuries"], y=df["Economic Loss"], alpha=0.7, color="darkviolet")
plt.title("Injuries vs Economic Loss", fontsize=14, fontweight='bold')
plt.xlabel("Number of Injuries", fontsize=12)
plt.ylabel("Economic Loss ($)", fontsize=12)
plt.show()
plt.figure(figsize=(10, 5))
sns.boxplot(x=df["Accident Severity"], y=df["Driver Alcohol Level"], palette="Dark2")
plt.title("Alcohol Level by Accident Severity")
plt.xlabel("Accident Severity")
plt.ylabel("Driver Alcohol Level")
plt.show()
plt.figure(figsize=(10, 5))
sns.countplot(x=df["Driver Fatigue"], palette="Set3")
plt.title("Fatigue Involvement in Accidents", fontsize=14, fontweight='bold')
plt.xlabel("Driver Fatigue (1=Yes, 0=No)", fontsize=12)
plt.ylabel("Count", fontsize=12)
plt.show()
plt.figure(figsize=(10, 5))
sns.kdeplot(df['Traffic Volume'], shade=True, color="orangered")
plt.title("Traffic Volume Density in Accidents", fontsize=14, fontweight='bold')
plt.xlabel("Traffic Volume", fontsize=12)
plt.show()
plt.figure(figsize=(10, 6))
sns.countplot(y=df["Accident Cause"], order=df["Accident Cause"].value_counts().index, palette="magma")
plt.title("Accidents by Cause")
plt.xlabel("Count")
plt.ylabel("Accident Cause")
plt.show()
importances = model.feature_importances_
feature_names = X.columns
indices = np.argsort(importances)[::-1]
plt.figure(figsize=(10, 6))
plt.title("Feature Importances")
plt.bar(range(len(indices)), importances[indices], color="b", align="center")
plt.xticks(range(len(indices)), feature_names[indices], rotation=90)
plt.xlim([-1, len(indices)])
plt.tight_layout()
plt.show()
importances = model.feature_importances_
feature_names = X.columns
indices = np.argsort(importances)[::-1]
plt.figure(figsize=(10, 6))
plt.title("Feature Importances")
plt.bar(range(len(indices)), importances[indices], color="b", align="center")
plt.xticks(range(len(indices)), feature_names[indices], rotation=90)
plt.xlim([-1, len(indices)])
plt.tight_layout()
plt.show()
positive_class = 1
y_test_binary = label_binarize(y_test, classes=[positive_class])
y_pred_prob_positive = model.predict_proba(X_test)[:, positive_class]
fpr, tpr, thresholds = roc_curve(y_test_binary, y_pred_prob_positive)
roc_auc = auc(fpr, tpr)
plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend(loc="lower right")
plt.show()
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=model.classes_, yticklabels=model.classes_)
plt.title("Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

